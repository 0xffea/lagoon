input AddCustomerInput {
  id: Int
  name: String!
  comment: String
  privateKey: String
}

input AddEnvironmentInput {
  name: String!
  project: Int!
  deployType: DeployType!
  environmentType: EnvType!
  openshiftProjectName: String!
}

input AddNotificationRocketChatInput {
  name: String!
  webhook: String!
  channel: String!
}

input AddNotificationSlackInput {
  name: String!
  webhook: String!
  channel: String!
}

input AddNotificationToProjectInput {
  project: String!
  notificationType: NotificationType!
  notificationName: String!
}

input AddOpenshiftInput {
  id: Int
  name: String!
  consoleUrl: String!
  token: String
  routerPattern: String
  projectUser: String
  sshHost: String
  sshPort: String
}

input AddOrUpdateEnvironmentStorageInput {
  environment: Int!
  persistentStorageClaim: String!
  bytesUsed: Int!
}

input AddProjectInput {
  id: Int
  name: String!
  customer: Int!
  gitUrl: String!
  subfolder: String
  openshift: Int!
  openshiftProjectPattern: String
  activeSystemsDeploy: String
  activeSystemsPromote: String
  activeSystemsRemove: String
  branches: String
  pullrequests: String
  productionEnvironment: String
  autoIdle: Int
  storageCalc: Int
}

input AddSshKeyInput {
  id: Int
  name: String!
  keyValue: String!
  keyType: SshKeyType
  userId: Int!
}

input AddUserInput {
  id: Int
  email: String
  firstName: String
  lastName: String
  comment: String
}

input AddUserToCustomerInput {
  customer: String!
  userId: Int!
}

input AddUserToProjectInput {
  project: String!
  userId: Int!
}

type Customer {
  id: Int
  name: String
  comment: String
  privateKey: String
  users: [User]
  created: String
}

scalar Date

input DeleteCustomerInput {
  name: String!
}

input DeleteEnvironmentInput {
  name: String!
  project: Int!
}

input DeleteNotificationRocketChatInput {
  name: String!
}

input DeleteNotificationSlackInput {
  name: String!
}

input DeleteOpenshiftInput {
  name: String!
}

input DeleteProjectInput {
  project: String!
}

input DeleteSshKeyInput {
  name: String!
}

input DeleteUserInput {
  id: Int!
}

enum DeployType {
  BRANCH
  PULLREQUEST
  PROMOTE
}

type EnviornmentHitsMonth {
  total: Int
}

type Environment {
  id: Int
  name: String
  project: Project
  deployType: String
  environmentType: String
  openshiftProjectName: String
  updated: String
  created: String
  deleted: String
  hoursMonth(month: Date): EnvironmentHoursMonth
  storages: [EnvironmentStorage]
  storageMonth(month: Date): EnvironmentStorageMonth
  hitsMonth(month: Date): EnviornmentHitsMonth
}

type EnvironmentHoursMonth {
  month: String
  hours: Int
}

type EnvironmentStorage {
  id: Int
  environment: Environment
  persistentStorageClaim: String
  bytesUsed: Float
  updated: String
}

type EnvironmentStorageMonth {
  month: String
  bytesUsed: Float
}

enum EnvType {
  PRODUCTION
  DEVELOPMENT
}

type Mutation {
  updateEnvironment(input: UpdateEnvironmentInput!): Environment
  updateSshKey(input: UpdateSshKeyInput!): SshKey
  updateNotificationRocketChat(input: UpdateNotificationRocketChatInput!): NotificationRocketChat
  updateNotificationSlack(input: UpdateNotificationSlackInput!): NotificationSlack
  updateOpenshift(input: UpdateOpenshiftInput!): Openshift
  updateCustomer(input: UpdateCustomerInput!): Customer
  updateProject(input: UpdateProjectInput!): Project
  addProject(input: AddProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): String
  addOrUpdateEnvironment(input: AddEnvironmentInput!): Environment
  addOrUpdateEnvironmentStorage(input: AddOrUpdateEnvironmentStorageInput!): EnvironmentStorage
  deleteEnvironment(input: DeleteEnvironmentInput!): String
  addSshKey(input: AddSshKeyInput!): SshKey
  deleteSshKey(input: DeleteSshKeyInput!): String
  addCustomer(input: AddCustomerInput!): Customer
  deleteCustomer(input: DeleteCustomerInput!): String
  addOpenshift(input: AddOpenshiftInput!): Openshift
  deleteOpenshift(input: DeleteOpenshiftInput!): String
  addNotificationRocketChat(input: AddNotificationRocketChatInput!): NotificationRocketChat
  addNotificationSlack(input: AddNotificationSlackInput!): NotificationSlack
  deleteNotificationRocketChat(input: DeleteNotificationRocketChatInput!): String
  deleteNotificationSlack(input: DeleteNotificationSlackInput!): String
  addNotificationToProject(input: AddNotificationToProjectInput!): Project
  removeNotificationFromProject(input: RemoveNotificationFromProjectInput!): Project
  addUser(input: AddUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): String
  addUserToProject(input: AddUserToProjectInput!): Project
  removeUserFromProject(input: RemoveUserFromProjectInput!): Project
  addUserToCustomer(input: AddUserToCustomerInput!): Customer
  removeUserFromCustomer(input: RemoveUserFromCustomerInput!): Customer
  truncateTable(tableName: String!): String
}

union Notification = NotificationRocketChat | NotificationSlack

type NotificationRocketChat {
  id: Int
  name: String
  webhook: String
  channel: String
}

type NotificationSlack {
  id: Int
  name: String
  webhook: String
  channel: String
}

enum NotificationType {
  SLACK
  ROCKETCHAT
}

type Openshift {
  id: Int
  name: String
  consoleUrl: String
  token: String
  routerPattern: String
  projectUser: String
  sshHost: String
  sshPort: String
  created: String
}

"""Lagoon Project (like a git repository)"""
type Project {
  """ID of project"""
  id: Int

  """Name of project"""
  name: String

  """Reference to customer object"""
  customer: Customer

  """
  Git URL, needs to be SSH Git URL in one of these two formats
  - git@192.168.99.1/project1.git
  - ssh://git@192.168.99.1:2222/project1.git
  """
  gitUrl: String

  """
  Set if the .lagoon.yml should be found in a subfolder
  Usefull if you have multiple Lagoon projects per Git Repository
  """
  subfolder: String

  """Notifications that should be sent for this project"""
  notifications(type: NotificationType): [Notification]

  """
  Which internal Lagoon System is responsible for deploying
  Currently only 'lagoon_openshiftBuildDeploy' exists
  """
  activeSystemsDeploy: String

  """
  Which internal Lagoon System is responsible for promoting
  Currently only 'lagoon_openshiftBuildDeploy' exists
  """
  activeSystemsPromote: String

  """
  Which internal Lagoon System is responsible for promoting
  Currently only 'lagoon_openshiftRemove' exists
  """
  activeSystemsRemove: String

  """
  Which branches should be deployed, can be one of:
  - `true` - all branches are deployed
  - `false` - no branches are deployed
  - REGEX - regex of all branches that should be deployed, example: `^(master|staging)$`
  """
  branches: String

  """
  Which Pull Requests should be deployed, can be one of:
  - `true` - all pull requests are deployed
  - `false` - no pull requests are deployed
  - REGEX - regex of all Pull Request titles that should be deployed, example: `[BUILD]`
  """
  pullrequests: String

  """
  Which environment(the name) should be marked as the production environment.
  *Important:* If you change this, you need to deploy both environments (the
  current and previous one) that are affected in order for the change to
  propagate correctly
  """
  productionEnvironment: String

  """Should this project have auto idling enabled (`1` or `0`)"""
  autoIdle: Int

  """Should storage for this environment be calculated (`1` or `0`)"""
  storageCalc: Int

  """Reference to OpenShift Object this Project should be deployed to"""
  openshift: Openshift

  """
  Pattern of OpenShift Project/Namespace that should be generated, default: `${project}-${environmentname}`
  """
  openshiftProjectPattern: String

  """Which Developer SSH keys should have access to this project"""
  users: [User]

  """Deployed Environments for this Project"""
  environments(
    """Filter by Environment Type"""
    type: EnvType

    """
    Include deleted Environments (by default deleted environment are hidden)
    """
    includeDeleted: Boolean
  ): [Environment]

  """Creation Timestamp of Project"""
  created: String
}

type Query {
  userBySshKey(sshKey: String!): User
  customerByName(name: String!): Customer
  projectByName(name: String!): Project
  projectByGitUrl(gitUrl: String!): Project
  environmentByOpenshiftProjectName(openshiftProjectName: String!): Environment
  allProjects(createdAfter: String, gitUrl: String): [Project]
  allCustomers(createdAfter: String): [Customer]
  allOpenshifts: [Openshift]
  allEnvironments(createdAfter: String): [Environment]
}

input RemoveNotificationFromProjectInput {
  project: String!
  notificationType: NotificationType!
  notificationName: String!
}

input RemoveUserFromCustomerInput {
  customer: String!
  userId: Int!
}

input RemoveUserFromProjectInput {
  project: String!
  userId: Int!
}

type SshKey {
  id: Int
  name: String
  keyValue: String
  keyType: String
  created: String
}

enum SshKeyType {
  SSH_RSA
  SSH_ED25519
}

type UnassignedNotification {
  id: Int
  name: String
  type: String
}

input UpdateCustomerInput {
  id: Int!
  patch: UpdateCustomerPatchInput!
}

input UpdateCustomerPatchInput {
  name: String
  comment: String
  privateKey: String
  created: String
}

input UpdateEnvironmentInput {
  id: Int!
  patch: UpdateEnvironmentPatchInput
}

input UpdateEnvironmentPatchInput {
  project: Int
  deployType: DeployType
  environmentType: EnvType
  openshiftProjectName: String
}

input UpdateNotificationRocketChatInput {
  name: String!
  patch: UpdateNotificationRocketChatPatchInput
}

input UpdateNotificationRocketChatPatchInput {
  name: String
  webhook: String
  channel: String
}

input UpdateNotificationSlackInput {
  name: String!
  patch: UpdateNotificationSlackPatchInput
}

input UpdateNotificationSlackPatchInput {
  name: String
  webhook: String
  channel: String
}

input UpdateOpenshiftInput {
  id: Int!
  patch: UpdateOpenshiftPatchInput!
}

input UpdateOpenshiftPatchInput {
  name: String
  consoleUrl: String
  token: String
  routerPattern: String
  projectUser: String
  sshHost: String
  sshPort: String
}

input UpdateProjectInput {
  id: Int!
  patch: UpdateProjectPatchInput!
}

input UpdateProjectPatchInput {
  name: String
  customer: Int
  gitUrl: String
  subfolder: String
  activeSystemsDeploy: String
  activeSystemsRemove: String
  branches: String
  productionEnvironment: String
  autoIdle: Int
  storageCalc: Int
  pullrequests: String
  openshift: Int
  openshiftProjectPattern: String
}

input UpdateSshKeyInput {
  id: Int!
  patch: UpdateSshKeyPatchInput!
}

input UpdateSshKeyPatchInput {
  name: String
  keyValue: String
  keyType: SshKeyType
}

input UpdateUserInput {
  id: Int!
  patch: UpdateUserPatchInput!
}

input UpdateUserPatchInput {
  email: String
  firstName: String
  lastName: String
  comment: String
}

type User {
  id: Int
  email: String
  firstName: String
  lastName: String
  comment: String
  sshKeys: [SshKey]
}
