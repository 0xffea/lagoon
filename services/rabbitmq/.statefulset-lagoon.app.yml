apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: lagoon-openshift-template-node
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOON_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: SERVICE_IMAGE
    description: Pullable image of service
    required: true
  - name: CRONJOBS
    description: Oneliner of Cronjobs
    value: ""
objects:
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: ${SERVICE_NAME}-cluster
  spec:
    serviceName: ${SERVICE_NAME}-cluster
    replicas: 3
    selector:
      matchLabels:
        service: ${SERVICE_NAME}-cluster
    template:
      metadata:
        labels:
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
          service: ${SERVICE_NAME}-cluster
      spec:
        # affinity:
        #   podAntiAffinity:
        #     requiredDuringSchedulingIgnoredDuringExecution:
        #       - labelSelector:
        #           matchExpressions:
        #             - key: service
        #               operator: In
        #               values:
        #                 - ${SERVICE_NAME}-cluster
        #         topologyKey: kubernetes.io/hostname
        containers:
        - name: ${SERVICE_NAME}-cluster
          image: ${SERVICE_IMAGE}
          imagePullPolicy: Always
          ports:
          - containerPort: 15672
            protocol: TCP
          - containerPort: 5672
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 5672
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - name: ${SERVICE_NAME}-cluster
            mountPath: /var/lib/rabbitmq
          env:
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-username
                  key: RABBITMQ_USERNAME
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-password
                  key: RABBITMQ_PASSWORD
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: SERVICE_NAME
              value: ${SERVICE_NAME}
            - name: CRONJOBS
              value: ${CRONJOBS}
    volumeClaimTemplates:
    - metadata:
        name: ${SERVICE_NAME}-cluster
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
    updateStrategy:
      type: RollingUpdate

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    ports:
    - name: 15672-tcp
      port: 15672
      protocol: TCP
      targetPort: 15672
    - name: 5672-tcp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      service: ${SERVICE_NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
    name: ${SERVICE_NAME}
  spec:
    host: ${SERVICE_ROUTER_URL}
    port:
      targetPort: 15672-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
